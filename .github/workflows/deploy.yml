name: Build on GitHub, Deploy to Server (SvelteKit)

# 触发条件：当推送到 main 分支或手动触发
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # ----------------------------------------------------
  # 作业 1: 在 GitHub 云端服务器上构建项目
  # ----------------------------------------------------
  build:
    name: Build SvelteKit Project
    runs-on: ubuntu-latest # 使用 GitHub 官方的云端 Runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile # 使用 --frozen-lockfile 保证依赖一致性

      - name: Run tests (if any)
        run: bun test

      - name: Build project
        env:
          # 构建时需要的环境变量，从 Secrets 获取
          PUBLIC_GA_ID: ${{ secrets.PUBLIC_GA_ID }}
          VITE_API_BASE_URL: https://startend.xyz
        run: bun run build

      - name: Archive production artifacts
        # 将构建产物（build 目录）打包成一个文件，方便传输
        run: tar -czvf build.tar.gz build

      - name: Upload artifact for deployment job
        # 上传构建产物，以便下一个 Job 可以下载
        uses: actions/upload-artifact@v4
        with:
          name: sveltekit-build # 为产物命名
          path: build.tar.gz   # 指定要上传的文件

  # ----------------------------------------------------
  # 作业 2: 在你的自托管服务器上部署
  # ----------------------------------------------------
  deploy:
    name: Deploy to Server
    needs: build # 关键：确保这个 Job 在 build Job 成功后才运行
    runs-on: self-hosted # 关键：指定运行在你自己的服务器上

    steps:
      - name: Download artifact from build job
        # 下载 build Job 上传的构建产物
        uses: actions/download-artifact@v4
        with:
          name: sveltekit-build # 使用与上传时相同的名字

      - name: Deploy to application directory
        run: |
          set -e # 如果任何命令失败，则立即退出脚本

          echo "Unpacking artifact..."
          tar -xzvf build.tar.gz

          # 定义你的应用部署目录
          DEPLOY_PATH="/var/www/my-sveltekit"

          echo "Syncing files to ${DEPLOY_PATH}..."
          # 使用 rsync 可以高效地同步文件，并删除目标目录中多余的旧文件
          # 注意：源路径最后的 / 很重要
          rsync -av --delete ./build/ "${DEPLOY_PATH}/"

          cd "${DEPLOY_PATH}"

          echo "---- Installing production dependencies explicitly ----"

          bun install --production --verbose

          echo "Restarting application..."

          sudo systemctl restart my-sveltekit.service



          echo "Deployment successful!"